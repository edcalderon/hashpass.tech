version: 1.0
frontend:
  phases:
    preBuild:
      commands:
        - nvm install 22.18.0
        - npm install --quiet --global @expo/cli
        - npm ci
        - pip install awscli --upgrade --user
        - export PATH=~/.local/bin:$PATH
    build:
      commands:
        # Set environment to production
        - export NODE_ENV=production
        
        # Clean previous builds
        - rm -rf web-build out dist
        - mkdir -p dist
        
        # Build the application
        - npx expo export:web || npx expo export -p web
        
        # Handle build output
        - |
          set -e
          
          # Default to web-build if it exists
          if [ -d "web-build" ]; then
            echo "Copying from web-build to dist"
            cp -r web-build/* dist/ 2>/dev/null || true
            cp -r web-build/.[!.]* dist/ 2>/dev/null || true
          fi
          
          # Create necessary directories
          mkdir -p dist/_expo/static/js
          
          # Create a simple index.html if it doesn't exist
          if [ ! -f "dist/index.html" ]; then
            echo "Creating simple index.html"
            cat > dist/index.html << 'EOL'
            <!DOCTYPE html>
            <html lang="en">
            <head>
                <meta charset="UTF-8">
                <meta name="viewport" content="width=device-width, initial-scale=1.0">
                <title>BSL 2025</title>
                <style>
                    body, html {
                        margin: 0;
                        padding: 0;
                        height: 100%;
                        display: flex;
                        flex-direction: column;
                        justify-content: center;
                        align-items: center;
                        font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif;
                        background-color: #f5f5f5;
                        color: #333;
                    }
                    h1 {
                        font-size: 2.5rem;
                        margin-bottom: 1rem;
                        color: #1a1a1a;
                    }
                    p {
                        color: #666;
                        font-size: 1.2rem;
                    }
                </style>
            </head>
            <body>
                <h1>BSL 2025</h1>
                <p>Loading application...</p>
                <script>
                const paths = [
                  '/_expo/static/js/bundle.js',
                  '/static/js/bundle.js',
                  '/bundle.js'
                ];
                
                function loadScript(src) {
                  return new Promise((resolve, reject) => {
                    const script = document.createElement('script');
                    script.src = src;
                    script.onload = () => resolve();
                    script.onerror = () => reject();
                    document.body.appendChild(script);
                  });
                }
                
                (async function() {
                  for (const path of paths) {
                    try {
                      console.log('Trying to load:', path);
                      await loadScript(path);
                      console.log('Successfully loaded:', path);
                      break;
                    } catch (e) {
                      console.log('Failed to load:', path);
                    }
                  }
                })();
                </script>
            </body>
            </html>
            EOL
          fi
          
          # Create 200.html for client-side routing
          cp dist/index.html dist/200.html 2>/dev/null || true
          
          # List all files for debugging
          echo "Build output files:"
          find dist -type f | sort
  
  artifacts:
    baseDirectory: dist
    files:
      - '**/*'
    customHeaders:
      - pattern: '**/*.html'
        headers:
          - key: Cache-Control
            value: 'no-cache, no-store, must-revalidate'
          - key: Pragma
            value: 'no-cache'
          - key: Expires
            value: '0'
      - pattern: '/*'
        headers:
          - key: Cache-Control
            value: 'no-cache, no-store, must-revalidate'
          - key: Pragma
            value: 'no-cache'
          - key: Expires
            value: '0'
      
      # Cache static assets
      - pattern: '**/*.+(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot|json)'
        headers:
          - key: Cache-Control
            value: 'public, max-age=31536000, immutable'
      
      # API CORS headers
      - pattern: 'api/bslatam/*'
        headers:
          - key: 'Access-Control-Allow-Origin'
            value: '*'
          - key: 'Access-Control-Allow-Headers'
            value: 'Content-Type, Authorization, X-Requested-With'
          - key: 'Access-Control-Allow-Methods'
            value: 'GET, POST, PUT, DELETE, OPTIONS'
          - key: 'Access-Control-Allow-Credentials'
            value: 'true'
      - pattern: '**/*.js'
        headers:
          - key: Cache-Control
            value: 'public, max-age=31536000, immutable'

  cache:
    paths:
      - node_modules/**/*
      - $(npm root --global)/**/*

# Redirects for SPA routing
redirects:
  - source: '/<*>'
    status: 200
    target: '/index.html'
  - source: '/sw.js'
    status: 200
    target: '/sw.js'
  - source: '/_expo/*'
    status: 200
    target: '/_expo/'
  - source: '/api/*'
    status: 200
    target: '/api/'
  - source: '/dashboard/*'
    status: 200
    target: '/index.html'
  - source: '/auth/*'
    status: 200
    target: '/index.html'
  - source: '/bslatam/*'
    status: 200
    target: '/index.html'

# Error page for 404s
customErrorResponses:
  - errorCode: 404
    responsePagePath: '/index.html'
    responseCode: 200
    errorCachingMinTTL: 0