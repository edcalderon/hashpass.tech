version: 1.0
frontend:
  phases:
    preBuild:
      commands:
        - nvm install 22.18.0
        - npm install --quiet --global @expo/cli
        - >
          if [ -f yarn.lock ]; then
            yarn install --frozen-lockfile
          elif [ -f package-lock.json ] || [ -f npm-shrinkwrap.json ]; then
            npm ci
          else
            npm install
          fi
        # Install AWS CLI for Lambda deployment
        - pip install awscli --upgrade --user
        - export PATH=~/.local/bin:$PATH
    build:
      commands:
        # Install dependencies
        - npm ci
        
        # Set environment to production
        - export NODE_ENV=production
        
        # Clean previous builds
        - rm -rf web-build out dist/web-build
        
        # Clean previous builds
        - rm -rf web-build out dist/client
        
        # Build the application
        - npx expo export:web || npx expo export -p web
        
        # Create dist/client directory
        - mkdir -p dist/client
        
        # Copy build output to dist/client
        - |
          # Check for different possible build output locations
          if [ -d "dist/client/server" ]; then
            echo "Found server-side generated files in dist/client/server"
            # Move everything from dist/client/server to dist/client
            mv dist/client/server/* dist/client/ 2>/dev/null || true
            mv dist/client/server/.* dist/client/ 2>/dev/null || true
            rmdir dist/client/server 2>/dev/null || true
          elif [ -d "web-build" ]; then
            echo "Copying from web-build to dist/client"
            cp -r web-build/* dist/client/ 2>/dev/null || true
            cp -r web-build/.[!.]* dist/client/ 2>/dev/null || true
          elif [ -d "dist" ]; then
            echo "Copying from dist to dist/client"
            find dist -mindepth 1 -maxdepth 1 -not -name "client" -exec cp -r {} dist/client/ \;
          fi
        
        # Handle static files and directories
        - |
          # Create necessary directories
          mkdir -p dist/client/_expo/static
          mkdir -p dist/client/static/js
          
          # Copy static files from various possible locations
          if [ -d "dist/client/static" ]; then
            cp -r dist/client/static/* dist/client/_expo/static/ 2>/dev/null || true
          fi
          
          # Look for bundle.js in common locations and copy to the right place
          if [ -f "dist/client/static/js/bundle.js" ]; then
            echo "Found bundle.js in static/js/"
          elif [ -f "dist/client/_expo/static/js/bundle.js" ]; then
            echo "Found bundle.js in _expo/static/js/"
          else
            echo "Searching for bundle.js in build output..."
            find dist -name "bundle.js" -exec cp {} dist/client/static/js/ \; 2>/dev/null || true
            find dist -name "*.bundle.js" -exec cp {} dist/client/static/js/ \; 2>/dev/null || true
          fi
          
          # Create 200.html for client-side routing
          if [ ! -f "dist/client/200.html" ] && [ -f "dist/client/index.html" ]; then 
            cp dist/client/index.html dist/client/200.html
          fi
          
          # Verify build output
          echo "Build output verification:"
          echo "Files in dist/client:"
          find dist/client -type f | sort
          
          # Check for index.html in common locations
          if [ -f "dist/client/index.html" ]; then
            echo "Found index.html in dist/client/"
          elif [ -f "dist/client/server/index.html" ]; then
            echo "Moving index.html from dist/client/server/ to dist/client/"
            mv dist/client/server/index.html dist/client/
          else
            echo "Error: index.html not found in expected locations"
            find . -name "index.html" -type f
            # Create a clean, centered index.html as fallback
            echo '<!DOCTYPE html>
            <html lang="en">
            <head>
                <meta charset="UTF-8">
                <meta name="viewport" content="width=device-width, initial-scale=1.0">
                <title>BSL 2025</title>
                <style>
                    body, html {
                        margin: 0;
                        padding: 0;
                        height: 100%;
                        display: flex;
                        flex-direction: column;
                        justify-content: center;
                        align-items: center;
                        font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif;
                        background-color: #f5f5f5;
                        color: #333;
                    }
                    h1 {
                        font-size: 2.5rem;
                        margin-bottom: 1rem;
                        color: #1a1a1a;
                    }
                    p {
                        color: #666;
                        font-size: 1.2rem;
                    }
                </style>
            </head>
            <body>
                <h1>BSL 2025</h1>
                <p>Loading application...</p>
                <script src="/_expo/static/js/bundle.js"></script>
                <script>
                  // Fallback to try loading from root if _expo path fails
                  window.addEventListener('error', function(e) {
                    if (e.target.tagName === 'SCRIPT' && e.target.src.includes('bundle.js')) {
                      console.log('Fallback: Trying to load bundle.js from root');
                      var script = document.createElement('script');
                      script.src = '/static/js/bundle.js';
                      document.body.appendChild(script);
                    }
                  }, true);
                </script>
            </body>
            </html>' > dist/client/index.html
          fi
        
        # Build and deploy Lambda functions
        - echo "Building Lambda functions..."
        - cd amplify/backend/function/agendaMonitor
        - npm install --production --no-optional
        - cd ../../..
        
        # Deploy Lambda function
        - echo "Deploying Lambda function..."
        - amplify push --yes --no-gql-override
  artifacts:
    baseDirectory: dist/client
    files:
      - '**/*'
    # Rewrite rules for client-side routing
    customHeaders:
      # Handle HTML files with no caching
      - pattern: '**/*.html'
        headers:
          - key: Cache-Control
            value: 'no-cache, no-store, must-revalidate'
          - key: Pragma
            value: 'no-cache'
          - key: Expires
            value: '0'
      
      # Handle root and nested routes
      - pattern: '/*'
        headers:
          - key: Cache-Control
            value: 'no-cache, no-store, must-revalidate'
          - key: Pragma
            value: 'no-cache'
          - key: Expires
            value: '0'
      
      # Cache static assets
      - pattern: '**/*.+(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot|json)'
        headers:
          - key: Cache-Control
            value: 'public, max-age=31536000, immutable'
      
      # API CORS headers
      - pattern: 'api/bslatam/*'
        headers:
          - key: 'Access-Control-Allow-Origin'
            value: '*'
          - key: 'Access-Control-Allow-Headers'
            value: 'Content-Type, Authorization, X-Requested-With'
          - key: 'Access-Control-Allow-Methods'
            value: 'GET, POST, PUT, DELETE, OPTIONS'
          - key: 'Access-Control-Allow-Credentials'
            value: 'true'
      - pattern: '**/*.js'
        headers:
          - key: Cache-Control
            value: 'public, max-age=31536000, immutable'

  cache:
    paths:
      - node_modules/**/*
      - $(npm root --global)/**/*

# Redirects for SPA routing
redirects:
  - source: '/<*>'
    status: 200
    target: '/index.html'
  - source: '/sw.js'
    status: 200
    target: '/sw.js'
  - source: '/_expo/*'
    status: 200
    target: '/_expo/'
  - source: '/api/*'
    status: 200
    target: '/api/'
  - source: '/dashboard/*'
    status: 200
    target: '/index.html'
  - source: '/auth/*'
    status: 200
    target: '/index.html'
  - source: '/bslatam/*'
    status: 200
    target: '/index.html'

# Error page for 404s
customErrorResponses:
  - errorCode: 404
    responsePagePath: '/index.html'
    responseCode: 200
    errorCachingMinTTL: 0