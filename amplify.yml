version: 1.0
frontend:
  phases:
    preBuild:
      commands:
        - nvm install 22.18.0
        - npm install --quiet --global @expo/cli
        - >
          if [ -f yarn.lock ]; then
            yarn install --frozen-lockfile
          elif [ -f package-lock.json ] || [ -f npm-shrinkwrap.json ]; then
            npm ci
          else
            npm install
          fi
        # Install AWS CLI for Lambda deployment
        - pip install awscli --upgrade --user
        - export PATH=~/.local/bin:$PATH
    build:
      commands:
        # Install dependencies
        - npm ci
        
        # Set environment to production
        - export NODE_ENV=production
        
        # Clean previous builds
        - rm -rf web-build out dist/web-build
        
        # Clean previous builds
        - rm -rf web-build out dist/client
        
        # Build the application
        - npx expo export:web || npx expo export -p web
        
        # Create dist/client directory
        - mkdir -p dist/client
        
        # Copy build output to dist/client
        - if [ -d "web-build" ]; then
            echo "Copying from web-build to dist/client"
            cp -r web-build/* dist/client/ 2>/dev/null || true
            cp -r web-build/.[!.]* dist/client/ 2>/dev/null || true
          elif [ -d "dist" ]; then
            echo "Copying from dist to dist/client"
            find dist -mindepth 1 -maxdepth 1 -not -name "client" -exec cp -r {} dist/client/ \;
          fi
        
        # Ensure _expo/static directory exists
        - mkdir -p dist/client/_expo/static
        - if [ -d "dist/client/static" ]; then cp -r dist/client/static/* dist/client/_expo/static/; fi
        
        # Create 200.html for client-side routing
        - if [ ! -f "dist/client/200.html" ]; then cp dist/client/index.html dist/client/200.html; fi
        
        # Verify build output
        - echo "Build output verification:"
        - echo "Files in dist/client:"
        - find dist/client -type f | sort
        - echo "Checking for index.html:"
        - ls -la dist/client/index.html || (echo "index.html not found!" && exit 1)
        
        # Build and deploy Lambda functions
        - echo "Building Lambda functions..."
        - cd amplify/backend/function/agendaMonitor
        - npm install --production --no-optional
        - cd ../../..
        
        # Deploy Lambda function
        - echo "Deploying Lambda function..."
        - amplify push --yes --no-gql-override
  artifacts:
    baseDirectory: dist/client
    files:
      - '**/*'
    # Rewrite rules for client-side routing
    customHeaders:
      # Handle HTML files with no caching
      - pattern: '**/*.html'
        headers:
          - key: Cache-Control
            value: 'no-cache, no-store, must-revalidate'
          - key: Pragma
            value: 'no-cache'
          - key: Expires
            value: '0'
      
      # Handle root and nested routes
      - pattern: '/*'
        headers:
          - key: Cache-Control
            value: 'no-cache, no-store, must-revalidate'
          - key: Pragma
            value: 'no-cache'
          - key: Expires
            value: '0'
      
      # Cache static assets
      - pattern: '**/*.+(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot|json)'
        headers:
          - key: Cache-Control
            value: 'public, max-age=31536000, immutable'
      
      # API CORS headers
      - pattern: 'api/bslatam/*'
        headers:
          - key: 'Access-Control-Allow-Origin'
            value: '*'
          - key: 'Access-Control-Allow-Headers'
            value: 'Content-Type, Authorization, X-Requested-With'
          - key: 'Access-Control-Allow-Methods'
            value: 'GET, POST, PUT, DELETE, OPTIONS'
          - key: 'Access-Control-Allow-Credentials'
            value: 'true'
      - pattern: '**/*.js'
        headers:
          - key: Cache-Control
            value: 'public, max-age=31536000, immutable'

  cache:
    paths:
      - node_modules/**/*
      - $(npm root --global)/**/*

# Redirects for SPA routing
redirects:
  - source: '/<*>'
    status: 200
    target: '/index.html'
  - source: '/sw.js'
    status: 200
    target: '/sw.js'
  - source: '/_expo/*'
    status: 200
    target: '/_expo/'
  - source: '/api/*'
    status: 200
    target: '/api/'
  - source: '/dashboard/*'
    status: 200
    target: '/index.html'
  - source: '/auth/*'
    status: 200
    target: '/index.html'
  - source: '/bslatam/*'
    status: 200
    target: '/index.html'

# Error page for 404s
customErrorResponses:
  - errorCode: 404
    responsePagePath: '/index.html'
    responseCode: 200
    errorCachingMinTTL: 0